
AVRASM ver. 2.1.30  C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm Tue Jul 10 21:05:13 2018

C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm(1090): warning: Register r4 already defined by the .DEF directive
C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm(1091): warning: Register r5 already defined by the .DEF directive
C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm(1092): warning: Register r6 already defined by the .DEF directive
C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm(1093): warning: Register r7 already defined by the .DEF directive
C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm(1094): warning: Register r8 already defined by the .DEF directive
C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm(1095): warning: Register r9 already defined by the .DEF directive
C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm(1096): warning: Register r10 already defined by the .DEF directive
C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm(1097): warning: Register r11 already defined by the .DEF directive
C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm(1098): warning: Register r12 already defined by the .DEF directive
C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm(1099): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _menu=R4
                 	.DEF _menu_msb=R5
                 	.DEF _first_3_ON=R6
                 	.DEF _first_3_ON_msb=R7
                 	.DEF _stop=R8
                 	.DEF _stop_msb=R9
                 	.DEF _flag=R10
                 	.DEF _flag_msb=R11
                 	.DEF _direction_flag=R12
                 	.DEF _direction_flag_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0053 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0089 	JMP  _timer0_comp_isr
000020 940c 0083 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0000
000047 0000      	.DB  0x0,0x0,0x0,0x0
000048 0000
000049 0000      	.DB  0x0,0x0,0x0,0x0
00004a 0000      	.DB  0x0,0x0
                 
                 _0x3:
C:\cvavr\BIN\Debug\List\ÄÚµå¸¦ ¿¹»Ú°Ô Â¥º¾½Ã´Ù.asm(1151): warning: .cseg .db misalignment - padding zero byte
00004b 0001      	.DB  0x1
                 
                 __GLOBAL_INI_TBL:
00004c 000a      	.DW  0x0A
00004d 0004      	.DW  0x04
00004e 008c      	.DW  __REG_VARS*2
                 
00004f 0001      	.DW  0x01
000050 0500      	.DW  _led
000051 0096      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000052 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000053 94f8      	CLI
000054 27ee      	CLR  R30
000055 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000056 e0f1      	LDI  R31,1
000057 bff5      	OUT  MCUCR,R31
000058 bfe5      	OUT  MCUCR,R30
000059 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00005b e08d      	LDI  R24,(14-2)+1
00005c e0a2      	LDI  R26,2
00005d 27bb      	CLR  R27
                 __CLEAR_REG:
00005e 93ed      	ST   X+,R30
00005f 958a      	DEC  R24
000060 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000061 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000062 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000063 e0a0      	LDI  R26,LOW(__SRAM_START)
000064 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000065 93ed      	ST   X+,R30
000066 9701      	SBIW R24,1
000067 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000068 e9e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000069 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006a 9185      	LPM  R24,Z+
00006b 9195      	LPM  R25,Z+
00006c 9700      	SBIW R24,0
00006d f061      	BREQ __GLOBAL_INI_END
00006e 91a5      	LPM  R26,Z+
00006f 91b5      	LPM  R27,Z+
000070 9005      	LPM  R0,Z+
000071 9015      	LPM  R1,Z+
000072 01bf      	MOVW R22,R30
000073 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000074 9005      	LPM  R0,Z+
000075 920d      	ST   X+,R0
000076 9701      	SBIW R24,1
000077 f7e1      	BRNE __GLOBAL_INI_LOOP
000078 01fb      	MOVW R30,R22
000079 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00007a bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007c bfed      	OUT  SPL,R30
00007d e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000080 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000081 940c 009a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;//20180709 ÃÑÁ¤¸® ÄÚµå º¹½À.
                 ;
                 ;
                 ;#include <delay.h>
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;//¸Þ´º ¹®±¸ »ç¿ëÀ» À§ÇÑ ÃÊ±âÈ­.
                 ;int menu = 0;
                 ;
                 ;
                 ;
                 ;//½ºÀ§Ä¡ ´­·È³ª¿ä??
                 ;#define switch_1_ON (!(PINA.3))
                 ;#define switch_2_ON (!(PINA.4))
                 ;#define switch_3_ON (!(PINA.5))
                 ;#define switch_1_OFF (PINA.3)
                 ;#define switch_2_OFF (PINA.4)
                 ;#define switch_3_OFF (PINA.5)
                 ;
                 ;//¹öÆ°ÀÌ Ã³À½ ´­·È³ª¿ä?
                 ;
                 ;int first_3_ON = 0;
                 ;
                 ;
                 ;
                 ;//ÀÏ½ÃÁ¤Áö ÇÒ°Ç°¡¿ä??
                 ;int stop = 0;
                 ;int flag = 0;
                 ;int direction_flag = 0;
                 ;
                 ;//OCR°ªÀ» ³»¸±°Ç°¡¿ä?
                 ;
                 ;
                 ;unsigned char led = 0x01;
                 
                 	.DSEG
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0024 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000083 93aa      	ST   -Y,R26
000084 93ea      	ST   -Y,R30
000085 b7ef      	IN   R30,SREG
000086 93ea      	ST   -Y,R30
                 ; 0000 0025 PORTA = PORTA | led;
000087 d100      	RCALL SUBOPT_0x0
000088 c00b      	RJMP _0x20
                 ; 0000 0026 }
                 ; .FEND
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0028 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000089 93aa      	ST   -Y,R26
00008a 93ea      	ST   -Y,R30
00008b b7ef      	IN   R30,SREG
00008c 93ea      	ST   -Y,R30
                 ; 0000 0029  PORTA = PORTA & !led;
00008d b3eb      	IN   R30,0x1B
00008e 2fae      	MOV  R26,R30
00008f 91e0 0500 	LDS  R30,_led
000091 940e 0197 	CALL __LNEGB1
000093 23ea      	AND  R30,R26
                 _0x20:
000094 bbeb      	OUT  0x1B,R30
                 ; 0000 002A }
000095 91e9      	LD   R30,Y+
000096 bfef      	OUT  SREG,R30
000097 91e9      	LD   R30,Y+
000098 91a9      	LD   R26,Y+
000099 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void init(void);
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0031 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0032  init();
00009a d095      	RCALL _init
                 ; 0000 0033  OCR0 = 255;
00009b efef      	LDI  R30,LOW(255)
00009c bfe1      	OUT  0x31,R30
                 ; 0000 0034  PORTA = led;
00009d 91e0 0500 	LDS  R30,_led
00009f bbeb      	OUT  0x1B,R30
                 ; 0000 0035  #asm("sei")
0000a0 9478      	sei
                 ; 0000 0036 
                 ; 0000 0037 
                 ; 0000 0038  while(1){
                 _0x4:
                 ; 0000 0039     if (switch_1_ON) {menu = 1;
0000a1 99cb      	SBIC 0x19,3
0000a2 c007      	RJMP _0x7
0000a3 e0e1      	LDI  R30,LOW(1)
0000a4 e0f0      	LDI  R31,HIGH(1)
0000a5 012f      	MOVW R4,R30
                 ; 0000 003A     delay_ms(100); }
0000a6 e6a4      	LDI  R26,LOW(100)
0000a7 e0b0      	LDI  R27,0
0000a8 940e 018d 	CALL _delay_ms
                 ; 0000 003B 
                 ; 0000 003C     if (switch_2_ON){ menu = 2;
                 _0x7:
0000aa 99cc      	SBIC 0x19,4
0000ab c007      	RJMP _0x8
0000ac e0e2      	LDI  R30,LOW(2)
0000ad e0f0      	LDI  R31,HIGH(2)
0000ae 012f      	MOVW R4,R30
                 ; 0000 003D     delay_ms(100);}
0000af e6a4      	LDI  R26,LOW(100)
0000b0 e0b0      	LDI  R27,0
0000b1 940e 018d 	CALL _delay_ms
                 ; 0000 003E 
                 ; 0000 003F     if (switch_3_ON){
                 _0x8:
0000b3 99cd      	SBIC 0x19,5
0000b4 c012      	RJMP _0x9
                 ; 0000 0040 
                 ; 0000 0041         if (first_3_ON == 0){
0000b5 2c06      	MOV  R0,R6
0000b6 2807      	OR   R0,R7
0000b7 f429      	BRNE _0xA
                 ; 0000 0042             stop = 1;
0000b8 e0e1      	LDI  R30,LOW(1)
0000b9 e0f0      	LDI  R31,HIGH(1)
0000ba 014f      	MOVW R8,R30
                 ; 0000 0043             first_3_ON =1;
0000bb 013f      	MOVW R6,R30
                 ; 0000 0044             }
                 ; 0000 0045 
                 ; 0000 0046         else{
0000bc c004      	RJMP _0xB
                 _0xA:
                 ; 0000 0047              stop = 0;
0000bd 2488      	CLR  R8
0000be 2499      	CLR  R9
                 ; 0000 0048              first_3_ON = 0;
0000bf 2466      	CLR  R6
0000c0 2477      	CLR  R7
                 ; 0000 0049         }
                 _0xB:
                 ; 0000 004A      PORTA = 0xFF;
0000c1 efef      	LDI  R30,LOW(255)
0000c2 bbeb      	OUT  0x1B,R30
                 ; 0000 004B      delay_ms(500);
0000c3 efa4      	LDI  R26,LOW(500)
0000c4 e0b1      	LDI  R27,HIGH(500)
0000c5 940e 018d 	CALL _delay_ms
                 ; 0000 004C         }
                 ; 0000 004D 
                 ; 0000 004E   switch (menu){
                 _0x9:
0000c7 01f2      	MOVW R30,R4
                 ; 0000 004F 
                 ; 0000 0050     case 1 :
0000c8 30e1      	CPI  R30,LOW(0x1)
0000c9 e0a0      	LDI  R26,HIGH(0x1)
0000ca 07fa      	CPC  R31,R26
0000cb f4f1      	BRNE _0xF
                 ; 0000 0051         if(stop ==0){
0000cc 2c08      	MOV  R0,R8
0000cd 2809      	OR   R0,R9
0000ce f499      	BRNE _0x10
                 ; 0000 0052              if (led >= 8)
0000cf 91a0 0500 	LDS  R26,_led
0000d1 30a8      	CPI  R26,LOW(0x8)
0000d2 f018      	BRLO _0x11
                 ; 0000 0053              led = 0;
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 93e0 0500 	STS  _led,R30
                 ; 0000 0054 
                 ; 0000 0055              led ++;
                 _0x11:
0000d6 91e0 0500 	LDS  R30,_led
0000d8 5fef      	SUBI R30,-LOW(1)
0000d9 93e0 0500 	STS  _led,R30
                 ; 0000 0056              PORTA |= led;
0000db d0ac      	RCALL SUBOPT_0x0
0000dc bbeb      	OUT  0x1B,R30
                 ; 0000 0057              delay_ms(500);
0000dd efa4      	LDI  R26,LOW(500)
0000de e0b1      	LDI  R27,HIGH(500)
0000df 940e 018d 	CALL _delay_ms
                 ; 0000 0058         }
                 ; 0000 0059 
                 ; 0000 005A         else if(stop ==1){
0000e1 c007      	RJMP _0x12
                 _0x10:
0000e2 e0e1      	LDI  R30,LOW(1)
0000e3 e0f0      	LDI  R31,HIGH(1)
0000e4 15e8      	CP   R30,R8
0000e5 05f9      	CPC  R31,R9
0000e6 f411      	BRNE _0x13
                 ; 0000 005B             PORTA = PORTA;
0000e7 b3eb      	IN   R30,0x1B
0000e8 bbeb      	OUT  0x1B,R30
                 ; 0000 005C         }
                 ; 0000 005D 
                 ; 0000 005E         break;
                 _0x13:
                 _0x12:
0000e9 c044      	RJMP _0xE
                 ; 0000 005F 
                 ; 0000 0060 
                 ; 0000 0061     case 2 :
                 _0xF:
0000ea 30e2      	CPI  R30,LOW(0x2)
0000eb e0a0      	LDI  R26,HIGH(0x2)
0000ec 07fa      	CPC  R31,R26
0000ed f009      	BREQ PC+2
0000ee c03f      	RJMP _0xE
                 ; 0000 0062         if(stop == 0){
0000ef 2c08      	MOV  R0,R8
0000f0 2809      	OR   R0,R9
0000f1 f5d1      	BRNE _0x15
                 ; 0000 0063 
                 ; 0000 0064             if(flag == 0) //2¹ø ¹öÆ°À» Ã³À½ ´­·¶À»¶§¸¸ ½ÇÇàµÈ´Ù!
0000f2 2c0a      	MOV  R0,R10
0000f3 280b      	OR   R0,R11
0000f4 f439      	BRNE _0x16
                 ; 0000 0065             {
                 ; 0000 0066                 OCR0 = 0; flag =1; led = 0x01;
0000f5 e0e0      	LDI  R30,LOW(0)
0000f6 bfe1      	OUT  0x31,R30
0000f7 e0e1      	LDI  R30,LOW(1)
0000f8 e0f0      	LDI  R31,HIGH(1)
0000f9 015f      	MOVW R10,R30
0000fa 93e0 0500 	STS  _led,R30
                 ; 0000 0067             }
                 ; 0000 0068 
                 ; 0000 0069             if (direction_flag == 0)  //ÇÃ·¡±× È®ÀÎÇÏ°í ¿Ã¸±Áö ¸»Áö °áÁ¤ÇÏ±â!
                 _0x16:
0000fc 2c0c      	MOV  R0,R12
0000fd 280d      	OR   R0,R13
0000fe f419      	BRNE _0x17
                 ; 0000 006A             {
                 ; 0000 006B                 OCR0++;
0000ff b7e1      	IN   R30,0x31
000100 5fef      	SUBI R30,-LOW(1)
000101 c007      	RJMP _0x1F
                 ; 0000 006C                 delay_ms(10);
                 ; 0000 006D             }
                 ; 0000 006E 
                 ; 0000 006F             else if(direction_flag == 1)
                 _0x17:
000102 e0e1      	LDI  R30,LOW(1)
000103 e0f0      	LDI  R31,HIGH(1)
000104 15ec      	CP   R30,R12
000105 05fd      	CPC  R31,R13
000106 f439      	BRNE _0x19
                 ; 0000 0070             {
                 ; 0000 0071                 OCR0--;
000107 b7e1      	IN   R30,0x31
000108 50e1      	SUBI R30,LOW(1)
                 _0x1F:
000109 bfe1      	OUT  0x31,R30
                 ; 0000 0072                 delay_ms(10);
00010a e0aa      	LDI  R26,LOW(10)
00010b e0b0      	LDI  R27,0
00010c 940e 018d 	CALL _delay_ms
                 ; 0000 0073             }
                 ; 0000 0074 
                 ; 0000 0075             if (OCR0 == 255) //ÇÃ·¡±×¸¦ ¼¼¿ì´Â Àå¼Ò Á¤ÇÏ±â. 255¿¡ µµ´ÞÇÏ¸é 1·Î ¹Ù²ãÁÖ°í, ±×´ÙÀ½ºÎÅÍ´Â Âß °¨¼ÒÇÑ´Ù.
                 _0x19:
00010e b7e1      	IN   R30,0x31
00010f 3fef      	CPI  R30,LOW(0xFF)
000110 f419      	BRNE _0x1A
                 ; 0000 0076              {
                 ; 0000 0077                  direction_flag = 1;
000111 e0e1      	LDI  R30,LOW(1)
000112 e0f0      	LDI  R31,HIGH(1)
000113 016f      	MOVW R12,R30
                 ; 0000 0078              }
                 ; 0000 0079 
                 ; 0000 007A             if (OCR0 == 0)  //0¿¡ µµÂøÇÏ¸é ÇÃ·¡±×¸¦ 0À¸·Î ¹Ù²ãÁÖ°í Àüµî ¿·Ä­À¸·Î ¿Å°ÜÁÖ±â. 255±îÁö Âß OCRÀ» ¿Ã·ÁÁØ´Ù.
                 _0x1A:
000114 b7e1      	IN   R30,0x31
000115 30e0      	CPI  R30,0
000116 f489      	BRNE _0x1B
                 ; 0000 007B             {
                 ; 0000 007C                 direction_flag = 0;
000117 24cc      	CLR  R12
000118 24dd      	CLR  R13
                 ; 0000 007D 
                 ; 0000 007E 
                 ; 0000 007F                 led = led<<1;
000119 91e0 0500 	LDS  R30,_led
00011b 0fee      	LSL  R30
00011c 93e0 0500 	STS  _led,R30
                 ; 0000 0080                 led = led&0x0F;
00011e 70ef      	ANDI R30,LOW(0xF)
00011f 93e0 0500 	STS  _led,R30
                 ; 0000 0081 
                 ; 0000 0082                 if(led == 0x08){
000121 91a0 0500 	LDS  R26,_led
000123 30a8      	CPI  R26,LOW(0x8)
000124 f419      	BRNE _0x1C
                 ; 0000 0083                     led = 0x01;
000125 e0e1      	LDI  R30,LOW(1)
000126 93e0 0500 	STS  _led,R30
                 ; 0000 0084                 }
                 ; 0000 0085 
                 ; 0000 0086 
                 ; 0000 0087             }
                 _0x1C:
                 ; 0000 0088             PORTA = PORTA |= led;
                 _0x1B:
000128 d05f      	RCALL SUBOPT_0x0
000129 bbeb      	OUT  0x1B,R30
00012a bbeb      	OUT  0x1B,R30
                 ; 0000 0089         }
                 ; 0000 008A 
                 ; 0000 008B         else{
00012b c002      	RJMP _0x1D
                 _0x15:
                 ; 0000 008C           OCR0 = OCR0;
00012c b7e1      	IN   R30,0x31
00012d bfe1      	OUT  0x31,R30
                 ; 0000 008D         }
                 _0x1D:
                 ; 0000 008E 
                 ; 0000 008F         break;
                 ; 0000 0090 
                 ; 0000 0091 
                 ; 0000 0092   }
                 _0xE:
                 ; 0000 0093 
                 ; 0000 0094    }
00012e cf72      	RJMP _0x4
                 ; 0000 0095 
                 ; 0000 0096 
                 ; 0000 0097 }
                 _0x1E:
00012f cfff      	RJMP _0x1E
                 ; .FEND
                 ;
                 ;void init(void){
                 ; 0000 0099 void init(void){
                 _init:
                 ; .FSTART _init
                 ; 0000 009A // Input/Output Ports initialization
                 ; 0000 009B // Port A initialization
                 ; 0000 009C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 009D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
000130 e0e7      	LDI  R30,LOW(7)
000131 bbea      	OUT  0x1A,R30
                 ; 0000 009E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 009F PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000132 e0e0      	LDI  R30,LOW(0)
000133 bbeb      	OUT  0x1B,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Port B initialization
                 ; 0000 00A2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00A3 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000134 bbe7      	OUT  0x17,R30
                 ; 0000 00A4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00A5 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000135 bbe8      	OUT  0x18,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // Port C initialization
                 ; 0000 00A8 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00A9 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000136 bbe4      	OUT  0x14,R30
                 ; 0000 00AA // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00AB PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000137 bbe5      	OUT  0x15,R30
                 ; 0000 00AC 
                 ; 0000 00AD // Port D initialization
                 ; 0000 00AE // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00AF DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000138 bbe1      	OUT  0x11,R30
                 ; 0000 00B0 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00B1 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000139 bbe2      	OUT  0x12,R30
                 ; 0000 00B2 
                 ; 0000 00B3 // Port E initialization
                 ; 0000 00B4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00B5 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
00013a b9e2      	OUT  0x2,R30
                 ; 0000 00B6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00B7 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
00013b b9e3      	OUT  0x3,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // Port F initialization
                 ; 0000 00BA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00BB DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
00013c 93e0 0061 	STS  97,R30
                 ; 0000 00BC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00BD PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
00013e 93e0 0062 	STS  98,R30
                 ; 0000 00BE 
                 ; 0000 00BF // Port G initialization
                 ; 0000 00C0 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00C1 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
000140 93e0 0064 	STS  100,R30
                 ; 0000 00C2 // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00C3 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
000142 93e0 0065 	STS  101,R30
                 ; 0000 00C4 
                 ; 0000 00C5 // Timer/Counter 0 initialization
                 ; 0000 00C6 // Clock source: System Clock
                 ; 0000 00C7 // Clock value: 2000.000 kHz
                 ; 0000 00C8 // Mode: Fast PWM top=0xFF
                 ; 0000 00C9 // OC0 output: Disconnected
                 ; 0000 00CA // Timer Period: 0.128 ms
                 ; 0000 00CB ASSR=0<<AS0;
000144 bfe0      	OUT  0x30,R30
                 ; 0000 00CC TCCR0=(1<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
000145 e4ea      	LDI  R30,LOW(74)
000146 bfe3      	OUT  0x33,R30
                 ; 0000 00CD TCNT0=0x00;
000147 e0e0      	LDI  R30,LOW(0)
000148 bfe2      	OUT  0x32,R30
                 ; 0000 00CE OCR0=0x00;
000149 bfe1      	OUT  0x31,R30
                 ; 0000 00CF 
                 ; 0000 00D0 // Timer/Counter 1 initialization
                 ; 0000 00D1 // Clock source: System Clock
                 ; 0000 00D2 // Clock value: Timer1 Stopped
                 ; 0000 00D3 // Mode: Normal top=0xFFFF
                 ; 0000 00D4 // OC1A output: Disconnected
                 ; 0000 00D5 // OC1B output: Disconnected
                 ; 0000 00D6 // OC1C output: Disconnected
                 ; 0000 00D7 // Noise Canceler: Off
                 ; 0000 00D8 // Input Capture on Falling Edge
                 ; 0000 00D9 // Timer1 Overflow Interrupt: Off
                 ; 0000 00DA // Input Capture Interrupt: Off
                 ; 0000 00DB // Compare A Match Interrupt: Off
                 ; 0000 00DC // Compare B Match Interrupt: Off
                 ; 0000 00DD // Compare C Match Interrupt: Off
                 ; 0000 00DE TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
00014a bdef      	OUT  0x2F,R30
                 ; 0000 00DF TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00014b bdee      	OUT  0x2E,R30
                 ; 0000 00E0 TCNT1H=0x00;
00014c bded      	OUT  0x2D,R30
                 ; 0000 00E1 TCNT1L=0x00;
00014d bdec      	OUT  0x2C,R30
                 ; 0000 00E2 ICR1H=0x00;
00014e bde7      	OUT  0x27,R30
                 ; 0000 00E3 ICR1L=0x00;
00014f bde6      	OUT  0x26,R30
                 ; 0000 00E4 OCR1AH=0x00;
000150 bdeb      	OUT  0x2B,R30
                 ; 0000 00E5 OCR1AL=0x00;
000151 bdea      	OUT  0x2A,R30
                 ; 0000 00E6 OCR1BH=0x00;
000152 bde9      	OUT  0x29,R30
                 ; 0000 00E7 OCR1BL=0x00;
000153 bde8      	OUT  0x28,R30
                 ; 0000 00E8 OCR1CH=0x00;
000154 93e0 0079 	STS  121,R30
                 ; 0000 00E9 OCR1CL=0x00;
000156 93e0 0078 	STS  120,R30
                 ; 0000 00EA 
                 ; 0000 00EB // Timer/Counter 2 initialization
                 ; 0000 00EC // Clock source: System Clock
                 ; 0000 00ED // Clock value: Timer2 Stopped
                 ; 0000 00EE // Mode: Normal top=0xFF
                 ; 0000 00EF // OC2 output: Disconnected
                 ; 0000 00F0 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000158 bde5      	OUT  0x25,R30
                 ; 0000 00F1 TCNT2=0x00;
000159 bde4      	OUT  0x24,R30
                 ; 0000 00F2 OCR2=0x00;
00015a bde3      	OUT  0x23,R30
                 ; 0000 00F3 
                 ; 0000 00F4 // Timer/Counter 3 initialization
                 ; 0000 00F5 // Clock source: System Clock
                 ; 0000 00F6 // Clock value: Timer3 Stopped
                 ; 0000 00F7 // Mode: Normal top=0xFFFF
                 ; 0000 00F8 // OC3A output: Disconnected
                 ; 0000 00F9 // OC3B output: Disconnected
                 ; 0000 00FA // OC3C output: Disconnected
                 ; 0000 00FB // Noise Canceler: Off
                 ; 0000 00FC // Input Capture on Falling Edge
                 ; 0000 00FD // Timer3 Overflow Interrupt: Off
                 ; 0000 00FE // Input Capture Interrupt: Off
                 ; 0000 00FF // Compare A Match Interrupt: Off
                 ; 0000 0100 // Compare B Match Interrupt: Off
                 ; 0000 0101 // Compare C Match Interrupt: Off
                 ; 0000 0102 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
00015b 93e0 008b 	STS  139,R30
                 ; 0000 0103 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
00015d 93e0 008a 	STS  138,R30
                 ; 0000 0104 TCNT3H=0x00;
00015f 93e0 0089 	STS  137,R30
                 ; 0000 0105 TCNT3L=0x00;
000161 93e0 0088 	STS  136,R30
                 ; 0000 0106 ICR3H=0x00;
000163 93e0 0081 	STS  129,R30
                 ; 0000 0107 ICR3L=0x00;
000165 93e0 0080 	STS  128,R30
                 ; 0000 0108 OCR3AH=0x00;
000167 93e0 0087 	STS  135,R30
                 ; 0000 0109 OCR3AL=0x00;
000169 93e0 0086 	STS  134,R30
                 ; 0000 010A OCR3BH=0x00;
00016b 93e0 0085 	STS  133,R30
                 ; 0000 010B OCR3BL=0x00;
00016d 93e0 0084 	STS  132,R30
                 ; 0000 010C OCR3CH=0x00;
00016f 93e0 0083 	STS  131,R30
                 ; 0000 010D OCR3CL=0x00;
000171 93e0 0082 	STS  130,R30
                 ; 0000 010E 
                 ; 0000 010F // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0110 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (1<<TOIE0);
000173 e0e3      	LDI  R30,LOW(3)
000174 bfe7      	OUT  0x37,R30
                 ; 0000 0111 ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
000175 e0e0      	LDI  R30,LOW(0)
000176 93e0 007d 	STS  125,R30
                 ; 0000 0112 
                 ; 0000 0113 // External Interrupt(s) initialization
                 ; 0000 0114 // INT0: Off
                 ; 0000 0115 // INT1: Off
                 ; 0000 0116 // INT2: Off
                 ; 0000 0117 // INT3: Off
                 ; 0000 0118 // INT4: Off
                 ; 0000 0119 // INT5: Off
                 ; 0000 011A // INT6: Off
                 ; 0000 011B // INT7: Off
                 ; 0000 011C EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000178 93e0 006a 	STS  106,R30
                 ; 0000 011D EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
00017a bfea      	OUT  0x3A,R30
                 ; 0000 011E EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
00017b bfe9      	OUT  0x39,R30
                 ; 0000 011F 
                 ; 0000 0120 // USART0 initialization
                 ; 0000 0121 // USART0 disabled
                 ; 0000 0122 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00017c b9ea      	OUT  0xA,R30
                 ; 0000 0123 
                 ; 0000 0124 // USART1 initialization
                 ; 0000 0125 // USART1 disabled
                 ; 0000 0126 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
00017d 93e0 009a 	STS  154,R30
                 ; 0000 0127 
                 ; 0000 0128 // Analog Comparator initialization
                 ; 0000 0129 // Analog Comparator: Off
                 ; 0000 012A // The Analog Comparator's positive input is
                 ; 0000 012B // connected to the AIN0 pin
                 ; 0000 012C // The Analog Comparator's negative input is
                 ; 0000 012D // connected to the AIN1 pin
                 ; 0000 012E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00017f e8e0      	LDI  R30,LOW(128)
000180 b9e8      	OUT  0x8,R30
                 ; 0000 012F SFIOR=(0<<ACME);
000181 e0e0      	LDI  R30,LOW(0)
000182 bde0      	OUT  0x20,R30
                 ; 0000 0130 
                 ; 0000 0131 // ADC initialization
                 ; 0000 0132 // ADC disabled
                 ; 0000 0133 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000183 b9e6      	OUT  0x6,R30
                 ; 0000 0134 
                 ; 0000 0135 // SPI initialization
                 ; 0000 0136 // SPI disabled
                 ; 0000 0137 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000184 b9ed      	OUT  0xD,R30
                 ; 0000 0138 
                 ; 0000 0139 // TWI initialization
                 ; 0000 013A // TWI disabled
                 ; 0000 013B TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000185 93e0 0074 	STS  116,R30
                 ; 0000 013C 
                 ; 0000 013D // Global enable interrupts
                 ; 0000 013E }
000187 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _led:
000500           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000188 b3eb      	IN   R30,0x1B
000189 91a0 0500 	LDS  R26,_led
00018b 2bea      	OR   R30,R26
00018c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00018d 9610      	adiw r26,0
00018e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00018f ea80     +LDI R24 , LOW ( 0xFA0 )
000190 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000191 9701     +SBIW R24 , 1
000192 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000193 95a8      	wdr
000194 9711      	sbiw r26,1
000195 f7c9      	brne __delay_ms0
                 __delay_ms1:
000196 9508      	ret
                 
                 __LNEGB1:
000197 23ee      	TST  R30
000198 e0e1      	LDI  R30,1
000199 f009      	BREQ __LNEGB1F
00019a 27ee      	CLR  R30
                 __LNEGB1F:
00019b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  14 r1 :   1 r2 :   0 r3 :   0 r4 :   3 r5 :   0 r6 :   3 r7 :   2 
r8 :   5 r9 :   4 r10:   2 r11:   1 r12:   4 r13:   3 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  10 r25:   3 r26:  25 r27:   8 r28:   1 r29:   1 r30: 153 r31:  14 
x  :   3 y  :   9 z  :   7 
Registers used: 23 out of 35 (65.7%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   1 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  16 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   6 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   4 cpi   :   6 cpse  :   0 dec   :   1 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  10 inc   :   0 jmp   :  36 ld    :   3 ldd   :   0 
ldi   :  55 lds   :   7 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   6 
movw  :  10 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   6 ori   :   0 out   :  53 pop   :   0 push  :   0 rcall :   4 
ret   :   4 reti  :   1 rjmp  :  13 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :   0 sbic  :   3 sbis  :   0 sbiw  :   5 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :   9 std   :   0 sts   :  29 sub   :   0 subi  :   3 
swap  :   0 tst   :   1 wdr   :   1 
Instructions used: 36 out of 117 (30.8%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000338    798     26    824  131072   0.6%
[.dseg] 0x000100 0x000501      0      1      1    4096   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 11 warnings
