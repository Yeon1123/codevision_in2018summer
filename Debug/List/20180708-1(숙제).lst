
AVRASM ver. 2.1.30  C:\cvavr\BIN\Debug\List\20180708-1(¼÷Á¦).asm Tue Jul 10 02:19:07 2018

C:\cvavr\BIN\Debug\List\20180708-1(¼÷Á¦).asm(1090): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _led=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0085 	JMP  _timer0_comp_isr
000020 940c 007b 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
C:\cvavr\BIN\Debug\List\20180708-1(¼÷Á¦).asm(1137): warning: .cseg .db misalignment - padding zero byte
000046 0001      	.DB  0x1
                 
                 
                 __GLOBAL_INI_TBL:
000047 0001      	.DW  0x01
000048 0005      	.DW  0x05
000049 008c      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00004a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004b 94f8      	CLI
00004c 27ee      	CLR  R30
00004d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004e e0f1      	LDI  R31,1
00004f bff5      	OUT  MCUCR,R31
000050 bfe5      	OUT  MCUCR,R30
000051 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000053 e08d      	LDI  R24,(14-2)+1
000054 e0a2      	LDI  R26,2
000055 27bb      	CLR  R27
                 __CLEAR_REG:
000056 93ed      	ST   X+,R30
000057 958a      	DEC  R24
000058 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000059 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005a e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005b e0a0      	LDI  R26,LOW(__SRAM_START)
00005c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005d 93ed      	ST   X+,R30
00005e 9701      	SBIW R24,1
00005f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000060 e8ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000061 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000062 9185      	LPM  R24,Z+
000063 9195      	LPM  R25,Z+
000064 9700      	SBIW R24,0
000065 f061      	BREQ __GLOBAL_INI_END
000066 91a5      	LPM  R26,Z+
000067 91b5      	LPM  R27,Z+
000068 9005      	LPM  R0,Z+
000069 9015      	LPM  R1,Z+
00006a 01bf      	MOVW R22,R30
00006b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006c 9005      	LPM  R0,Z+
00006d 920d      	ST   X+,R0
00006e 9701      	SBIW R24,1
00006f f7e1      	BRNE __GLOBAL_INI_LOOP
000070 01fb      	MOVW R30,R22
000071 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000072 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000073 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000074 bfed      	OUT  SPL,R30
000075 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000076 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000077 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000078 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000079 940c 0095 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;
                 ;#include <delay.h>
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;void init(void);
                 ;
                 ;unsigned char led = 0x01;
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 000C {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00007b 93ea      	ST   -Y,R30
00007c b7ef      	IN   R30,SREG
00007d 93ea      	ST   -Y,R30
                 ; 0000 000D PORTA = PORTA | led;
00007e b3eb      	IN   R30,0x1B
00007f 29e5      	OR   R30,R5
000080 bbeb      	OUT  0x1B,R30
                 ; 0000 000E 
                 ; 0000 000F }
000081 91e9      	LD   R30,Y+
000082 bfef      	OUT  SREG,R30
000083 91e9      	LD   R30,Y+
000084 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0013 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000085 93aa      	ST   -Y,R26
000086 93ea      	ST   -Y,R30
000087 b7ef      	IN   R30,SREG
000088 93ea      	ST   -Y,R30
                 ; 0000 0014  PORTA = PORTA & !led;
000089 b3eb      	IN   R30,0x1B
00008a 2fae      	MOV  R26,R30
00008b 2de5      	MOV  R30,R5
00008c 940e 01b4 	CALL __LNEGB1
00008e 23ea      	AND  R30,R26
00008f bbeb      	OUT  0x1B,R30
                 ; 0000 0015 
                 ; 0000 0016 }
000090 91e9      	LD   R30,Y+
000091 bfef      	OUT  SREG,R30
000092 91e9      	LD   R30,Y+
000093 91a9      	LD   R26,Y+
000094 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0019 {
                 _main:
                 ; .FSTART _main
                 ; 0000 001A //switch ´­¸°°Å È®ÀÎ¿ë flag
                 ; 0000 001B int button1_flag = 0;
                 ; 0000 001C int button2_flag = 0;
                 ; 0000 001D int button3_flag = 0;
                 ; 0000 001E 
                 ; 0000 001F //2¹ø ½ºÀ§Ä¡¿ë flag
                 ; 0000 0020 int flag = 0;
                 ; 0000 0021 int direction_flag = 0;
                 ; 0000 0022 
                 ; 0000 0023 //ÀÌÀü ÇÔ¼ö µ¹¾Æ°¡±â¿ë flag
                 ; 0000 0024 int stop = 0;
                 ; 0000 0025 
                 ; 0000 0026 init();
000095 9726      	SBIW R28,6
000096 e0e0      	LDI  R30,LOW(0)
000097 83e8      	ST   Y,R30
000098 83e9      	STD  Y+1,R30
000099 83ea      	STD  Y+2,R30
00009a 83eb      	STD  Y+3,R30
00009b 83ec      	STD  Y+4,R30
00009c 83ed      	STD  Y+5,R30
                 ;	button1_flag -> R16,R17
                 ;	button2_flag -> R18,R19
                 ;	button3_flag -> R20,R21
                 ;	flag -> Y+4
                 ;	direction_flag -> Y+2
                 ;	stop -> Y+0
                +
00009d e000     +LDI R16 , LOW ( 0 )
00009e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00009f e020     +LDI R18 , LOW ( 0 )
0000a0 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0000a1 e040     +LDI R20 , LOW ( 0 )
0000a2 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0000a3 d0aa      	RCALL _init
                 ; 0000 0027 OCR0 = 255;
0000a4 efef      	LDI  R30,LOW(255)
0000a5 bfe1      	OUT  0x31,R30
                 ; 0000 0028 PORTA = led;
0000a6 ba5b      	OUT  0x1B,R5
                 ; 0000 0029 
                 ; 0000 002A 
                 ; 0000 002B 
                 ; 0000 002C #asm("sei")
0000a7 9478      	sei
                 ; 0000 002D 
                 ; 0000 002E    while (1)
                 _0x3:
                 ; 0000 002F {
                 ; 0000 0030 
                 ; 0000 0031    if (!(PINA.3)) {
0000a8 99cb      	SBIC 0x19,3
0000a9 c00d      	RJMP _0x6
                 ; 0000 0032       if (button1_flag == 1)
0000aa e0e1      	LDI  R30,LOW(1)
0000ab e0f0      	LDI  R31,HIGH(1)
0000ac 17e0      	CP   R30,R16
0000ad 07f1      	CPC  R31,R17
0000ae f419      	BRNE _0x7
                 ; 0000 0033          button1_flag = 0;
                +
0000af e000     +LDI R16 , LOW ( 0 )
0000b0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0034 
                 ; 0000 0035       else
0000b1 c004      	RJMP _0x8
                 _0x7:
                 ; 0000 0036       {
                 ; 0000 0037          button1_flag = 1;
                +
0000b2 e001     +LDI R16 , LOW ( 1 )
0000b3 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 0038          button2_flag = 0;
                +
0000b4 e020     +LDI R18 , LOW ( 0 )
0000b5 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0039       }
                 _0x8:
                 ; 0000 003A 
                 ; 0000 003B       delay_ms(500);
0000b6 d0ef      	RCALL SUBOPT_0x0
                 ; 0000 003C    }
                 ; 0000 003D 
                 ; 0000 003E 
                 ; 0000 003F    if (!(PINA.4)) {
                 _0x6:
0000b7 99cc      	SBIC 0x19,4
0000b8 c00d      	RJMP _0x9
                 ; 0000 0040       if (button2_flag == 1)
0000b9 e0e1      	LDI  R30,LOW(1)
0000ba e0f0      	LDI  R31,HIGH(1)
0000bb 17e2      	CP   R30,R18
0000bc 07f3      	CPC  R31,R19
0000bd f419      	BRNE _0xA
                 ; 0000 0041          button2_flag = 0;
                +
0000be e020     +LDI R18 , LOW ( 0 )
0000bf e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0042       else
0000c0 c004      	RJMP _0xB
                 _0xA:
                 ; 0000 0043       {
                 ; 0000 0044 
                 ; 0000 0045          button1_flag = 0;
                +
0000c1 e000     +LDI R16 , LOW ( 0 )
0000c2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0046          button2_flag = 1;
                +
0000c3 e021     +LDI R18 , LOW ( 1 )
0000c4 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 0047       }
                 _0xB:
                 ; 0000 0048 
                 ; 0000 0049       delay_ms(500);
0000c5 d0e0      	RCALL SUBOPT_0x0
                 ; 0000 004A    }
                 ; 0000 004B 
                 ; 0000 004C 
                 ; 0000 004D    if (!(PINA.5)) {
                 _0x9:
0000c6 99cd      	SBIC 0x19,5
0000c7 c00b      	RJMP _0xC
                 ; 0000 004E       if (button3_flag == 1)
0000c8 e0e1      	LDI  R30,LOW(1)
0000c9 e0f0      	LDI  R31,HIGH(1)
0000ca 17e4      	CP   R30,R20
0000cb 07f5      	CPC  R31,R21
0000cc f419      	BRNE _0xD
                 ; 0000 004F          button3_flag = 0;
                +
0000cd e040     +LDI R20 , LOW ( 0 )
0000ce e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 0050 
                 ; 0000 0051       else
0000cf c002      	RJMP _0xE
                 _0xD:
                 ; 0000 0052       {
                 ; 0000 0053          button3_flag = 1;
                +
0000d0 e041     +LDI R20 , LOW ( 1 )
0000d1 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0054       }
                 _0xE:
                 ; 0000 0055 
                 ; 0000 0056       delay_ms(500);
0000d2 d0d3      	RCALL SUBOPT_0x0
                 ; 0000 0057    }
                 ; 0000 0058 
                 ; 0000 0059 
                 ; 0000 005A    if (button1_flag == 1){
                 _0xC:
0000d3 e0e1      	LDI  R30,LOW(1)
0000d4 e0f0      	LDI  R31,HIGH(1)
0000d5 17e0      	CP   R30,R16
0000d6 07f1      	CPC  R31,R17
0000d7 f4b9      	BRNE _0xF
                 ; 0000 005B 
                 ; 0000 005C          OCR0 = 255;
0000d8 efef      	LDI  R30,LOW(255)
0000d9 bfe1      	OUT  0x31,R30
                 ; 0000 005D 
                 ; 0000 005E           if(stop == 1){
0000da 81a8      	LD   R26,Y
0000db 81b9      	LDD  R27,Y+1
0000dc 9711      	SBIW R26,1
0000dd f419      	BRNE _0x10
                 ; 0000 005F                 PORTA = PORTA;
0000de b3eb      	IN   R30,0x1B
0000df bbeb      	OUT  0x1B,R30
                 ; 0000 0060          }
                 ; 0000 0061 
                 ; 0000 0062          else if(stop == 0){
0000e0 c00d      	RJMP _0x11
                 _0x10:
0000e1 81e8      	LD   R30,Y
0000e2 81f9      	LDD  R31,Y+1
0000e3 9730      	SBIW R30,0
0000e4 f449      	BRNE _0x12
                 ; 0000 0063 
                 ; 0000 0064              if (led >= 8)
0000e5 e0e8      	LDI  R30,LOW(8)
0000e6 165e      	CP   R5,R30
0000e7 f008      	BRLO _0x13
                 ; 0000 0065              led = 0;
0000e8 2455      	CLR  R5
                 ; 0000 0066 
                 ; 0000 0067              led ++;
                 _0x13:
0000e9 9453      	INC  R5
                 ; 0000 0068              PORTA |= led;
0000ea b3eb      	IN   R30,0x1B
0000eb 29e5      	OR   R30,R5
0000ec bbeb      	OUT  0x1B,R30
                 ; 0000 0069              delay_ms(500);
0000ed d0b8      	RCALL SUBOPT_0x0
                 ; 0000 006A             }
                 ; 0000 006B 
                 ; 0000 006C 
                 ; 0000 006D 
                 ; 0000 006E    }
                 _0x12:
                 _0x11:
                 ; 0000 006F 
                 ; 0000 0070 else if (button2_flag == 1)
0000ee c04f      	RJMP _0x14
                 _0xF:
0000ef e0e1      	LDI  R30,LOW(1)
0000f0 e0f0      	LDI  R31,HIGH(1)
0000f1 17e2      	CP   R30,R18
0000f2 07f3      	CPC  R31,R19
0000f3 f009      	BREQ PC+2
0000f4 c041      	RJMP _0x15
                 ; 0000 0071  {
                 ; 0000 0072          if(stop == 1){
0000f5 81a8      	LD   R26,Y
0000f6 81b9      	LDD  R27,Y+1
0000f7 9711      	SBIW R26,1
0000f8 f419      	BRNE _0x16
                 ; 0000 0073              OCR0 = OCR0;
0000f9 b7e1      	IN   R30,0x31
0000fa bfe1      	OUT  0x31,R30
                 ; 0000 0074          }
                 ; 0000 0075 
                 ; 0000 0076         else if(stop == 0){
0000fb c039      	RJMP _0x17
                 _0x16:
0000fc 81e8      	LD   R30,Y
0000fd 81f9      	LDD  R31,Y+1
0000fe 9730      	SBIW R30,0
0000ff f5a9      	BRNE _0x18
                 ; 0000 0077 
                 ; 0000 0078             if(flag == 0) //2¹ø ¹öÆ°À» Ã³À½ ´­·¶À»¶§¸¸ ½ÇÇàµÈ´Ù!
000100 81ec      	LDD  R30,Y+4
000101 81fd      	LDD  R31,Y+4+1
000102 9730      	SBIW R30,0
000103 f439      	BRNE _0x19
                 ; 0000 0079             {
                 ; 0000 007A                 OCR0 = 0; flag =1; led = 0x01;
000104 e0e0      	LDI  R30,LOW(0)
000105 bfe1      	OUT  0x31,R30
000106 e0e1      	LDI  R30,LOW(1)
000107 e0f0      	LDI  R31,HIGH(1)
000108 83ec      	STD  Y+4,R30
000109 83fd      	STD  Y+4+1,R31
00010a 2e5e      	MOV  R5,R30
                 ; 0000 007B             }
                 ; 0000 007C 
                 ; 0000 007D 
                 ; 0000 007E             if (direction_flag == 0)  //ÇÃ·¡±× È®ÀÎÇÏ°í ¿Ã¸±Áö ¸»Áö °áÁ¤ÇÏ±â!
                 _0x19:
00010b 81ea      	LDD  R30,Y+2
00010c 81fb      	LDD  R31,Y+2+1
00010d 9730      	SBIW R30,0
00010e f429      	BRNE _0x1A
                 ; 0000 007F             {
                 ; 0000 0080                 OCR0++;
00010f b7e1      	IN   R30,0x31
000110 5fef      	SUBI R30,-LOW(1)
000111 bfe1      	OUT  0x31,R30
000112 50e1      	SUBI R30,LOW(1)
                 ; 0000 0081                 delay_ms(10);
000113 c004      	RJMP _0x27
                 ; 0000 0082             }
                 ; 0000 0083 
                 ; 0000 0084             else
                 _0x1A:
                 ; 0000 0085             {
                 ; 0000 0086                 OCR0--;
000114 b7e1      	IN   R30,0x31
000115 50e1      	SUBI R30,LOW(1)
000116 bfe1      	OUT  0x31,R30
000117 5fef      	SUBI R30,-LOW(1)
                 ; 0000 0087                 delay_ms(10);
                 _0x27:
000118 e0aa      	LDI  R26,LOW(10)
000119 e0b0      	LDI  R27,0
00011a 940e 01aa 	CALL _delay_ms
                 ; 0000 0088             }
                 ; 0000 0089 
                 ; 0000 008A 
                 ; 0000 008B             if (OCR0 == 255) //ÇÃ·¡±×¸¦ ¼¼¿ì´Â Àå¼Ò Á¤ÇÏ±â. 255¿¡ µµ´ÞÇÏ¸é 1·Î ¹Ù²ãÁÖ°í, ±×´ÙÀ½ºÎÅÍ´Â Âß °¨¼ÒÇÑ´Ù.
00011c b7e1      	IN   R30,0x31
00011d 3fef      	CPI  R30,LOW(0xFF)
00011e f421      	BRNE _0x1C
                 ; 0000 008C              {
                 ; 0000 008D                  direction_flag = 1;
00011f e0e1      	LDI  R30,LOW(1)
000120 e0f0      	LDI  R31,HIGH(1)
000121 83ea      	STD  Y+2,R30
000122 83fb      	STD  Y+2+1,R31
                 ; 0000 008E              }
                 ; 0000 008F 
                 ; 0000 0090             if (OCR0 == 0)  //0¿¡ µµÂøÇÏ¸é ÇÃ·¡±×¸¦ 0À¸·Î ¹Ù²ãÁÖ°í Àüµî ¿·Ä­À¸·Î ¿Å°ÜÁÖ±â. 255±îÁö Âß OCRÀ» ¿Ã·ÁÁØ´Ù.
                 _0x1C:
000123 b7e1      	IN   R30,0x31
000124 30e0      	CPI  R30,0
000125 f479      	BRNE _0x1D
                 ; 0000 0091             {
                 ; 0000 0092                 direction_flag = 0;
000126 e0e0      	LDI  R30,LOW(0)
000127 83ea      	STD  Y+2,R30
000128 83eb      	STD  Y+2+1,R30
                 ; 0000 0093 
                 ; 0000 0094 
                 ; 0000 0095                 led = led<<1;
000129 0c55      	LSL  R5
                 ; 0000 0096                 led = led&0x0F;
00012a e0ef      	LDI  R30,LOW(15)
00012b 225e      	AND  R5,R30
                 ; 0000 0097 
                 ; 0000 0098                 if(led == 0x08){
00012c e0e8      	LDI  R30,LOW(8)
00012d 15e5      	CP   R30,R5
00012e f411      	BRNE _0x1E
                 ; 0000 0099                     led = 0x01;
00012f e0e1      	LDI  R30,LOW(1)
000130 2e5e      	MOV  R5,R30
                 ; 0000 009A                 }
                 ; 0000 009B 
                 ; 0000 009C                 PORTA = PORTA |= led;
                 _0x1E:
000131 b3eb      	IN   R30,0x1B
000132 29e5      	OR   R30,R5
000133 bbeb      	OUT  0x1B,R30
000134 bbeb      	OUT  0x1B,R30
                 ; 0000 009D             }
                 ; 0000 009E         }
                 _0x1D:
                 ; 0000 009F 
                 ; 0000 00A0 
                 ; 0000 00A1 }
                 _0x18:
                 _0x17:
                 ; 0000 00A2 
                 ; 0000 00A3 //   else if (button3_flag == 1)
                 ; 0000 00A4 //   {
                 ; 0000 00A5 //      stop = 1;
                 ; 0000 00A6 //
                 ; 0000 00A7 //   }
                 ; 0000 00A8 
                 ; 0000 00A9    else if (button1_flag == 0)
000135 c008      	RJMP _0x1F
                 _0x15:
000136 2e00      	MOV  R0,R16
000137 2a01      	OR   R0,R17
000138 f019      	BREQ _0x28
                 ; 0000 00AA    {
                 ; 0000 00AB       button3_flag = 1;
                 ; 0000 00AC    }
                 ; 0000 00AD 
                 ; 0000 00AE    else if (button2_flag == 0)
000139 2e02      	MOV  R0,R18
00013a 2a03      	OR   R0,R19
00013b f411      	BRNE _0x22
                 ; 0000 00AF    {
                 ; 0000 00B0       button3_flag = 1;
                 _0x28:
                +
00013c e041     +LDI R20 , LOW ( 1 )
00013d e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 00B1    }
                 ; 0000 00B2 
                 ; 0000 00B3   if (button3_flag == 0)
                 _0x22:
                 _0x1F:
                 _0x14:
00013e 2e04      	MOV  R0,R20
00013f 2a05      	OR   R0,R21
000140 f421      	BRNE _0x23
                 ; 0000 00B4    {
                 ; 0000 00B5         stop = 0;
000141 e0e0      	LDI  R30,LOW(0)
000142 83e8      	STD  Y+0,R30
000143 83e9      	STD  Y+0+1,R30
                 ; 0000 00B6    }
                 ; 0000 00B7 
                 ; 0000 00B8   else if(button3_flag == 1)
000144 c007      	RJMP _0x24
                 _0x23:
000145 e0e1      	LDI  R30,LOW(1)
000146 e0f0      	LDI  R31,HIGH(1)
000147 17e4      	CP   R30,R20
000148 07f5      	CPC  R31,R21
000149 f411      	BRNE _0x25
                 ; 0000 00B9   {
                 ; 0000 00BA         stop = 1;
00014a 83e8      	ST   Y,R30
00014b 83f9      	STD  Y+1,R31
                 ; 0000 00BB   }
                 ; 0000 00BC 
                 ; 0000 00BD }
                 _0x25:
                 _0x24:
00014c cf5b      	RJMP _0x3
                 ; 0000 00BE 
                 ; 0000 00BF }
                 _0x26:
00014d cfff      	RJMP _0x26
                 ; .FEND
                 ;
                 ;
                 ;void init(void){
                 ; 0000 00C2 void init(void){
                 _init:
                 ; .FSTART _init
                 ; 0000 00C3 // Input/Output Ports initialization
                 ; 0000 00C4 // Port A initialization
                 ; 0000 00C5 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00C6 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
00014e e0e7      	LDI  R30,LOW(7)
00014f bbea      	OUT  0x1A,R30
                 ; 0000 00C7 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00C8 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000150 e0e0      	LDI  R30,LOW(0)
000151 bbeb      	OUT  0x1B,R30
                 ; 0000 00C9 
                 ; 0000 00CA // Port B initialization
                 ; 0000 00CB // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00CC DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000152 bbe7      	OUT  0x17,R30
                 ; 0000 00CD // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00CE PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000153 bbe8      	OUT  0x18,R30
                 ; 0000 00CF 
                 ; 0000 00D0 // Port C initialization
                 ; 0000 00D1 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00D2 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000154 bbe4      	OUT  0x14,R30
                 ; 0000 00D3 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00D4 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000155 bbe5      	OUT  0x15,R30
                 ; 0000 00D5 
                 ; 0000 00D6 // Port D initialization
                 ; 0000 00D7 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00D8 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000156 bbe1      	OUT  0x11,R30
                 ; 0000 00D9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00DA PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000157 bbe2      	OUT  0x12,R30
                 ; 0000 00DB 
                 ; 0000 00DC // Port E initialization
                 ; 0000 00DD // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00DE DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
000158 b9e2      	OUT  0x2,R30
                 ; 0000 00DF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00E0 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
000159 b9e3      	OUT  0x3,R30
                 ; 0000 00E1 
                 ; 0000 00E2 // Port F initialization
                 ; 0000 00E3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E4 DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
00015a 93e0 0061 	STS  97,R30
                 ; 0000 00E5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00E6 PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
00015c 93e0 0062 	STS  98,R30
                 ; 0000 00E7 
                 ; 0000 00E8 // Port G initialization
                 ; 0000 00E9 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00EA DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
00015e 93e0 0064 	STS  100,R30
                 ; 0000 00EB // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00EC PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
000160 93e0 0065 	STS  101,R30
                 ; 0000 00ED 
                 ; 0000 00EE // Timer/Counter 0 initialization
                 ; 0000 00EF // Clock source: System Clock
                 ; 0000 00F0 // Clock value: 2000.000 kHz
                 ; 0000 00F1 // Mode: Fast PWM top=0xFF
                 ; 0000 00F2 // OC0 output: Disconnected
                 ; 0000 00F3 // Timer Period: 0.128 ms
                 ; 0000 00F4 ASSR=0<<AS0;
000162 bfe0      	OUT  0x30,R30
                 ; 0000 00F5 TCCR0=(1<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
000163 e4ea      	LDI  R30,LOW(74)
000164 bfe3      	OUT  0x33,R30
                 ; 0000 00F6 TCNT0=0x00;
000165 e0e0      	LDI  R30,LOW(0)
000166 bfe2      	OUT  0x32,R30
                 ; 0000 00F7 OCR0=0x00;
000167 bfe1      	OUT  0x31,R30
                 ; 0000 00F8 
                 ; 0000 00F9 // Timer/Counter 1 initialization
                 ; 0000 00FA // Clock source: System Clock
                 ; 0000 00FB // Clock value: Timer1 Stopped
                 ; 0000 00FC // Mode: Normal top=0xFFFF
                 ; 0000 00FD // OC1A output: Disconnected
                 ; 0000 00FE // OC1B output: Disconnected
                 ; 0000 00FF // OC1C output: Disconnected
                 ; 0000 0100 // Noise Canceler: Off
                 ; 0000 0101 // Input Capture on Falling Edge
                 ; 0000 0102 // Timer1 Overflow Interrupt: Off
                 ; 0000 0103 // Input Capture Interrupt: Off
                 ; 0000 0104 // Compare A Match Interrupt: Off
                 ; 0000 0105 // Compare B Match Interrupt: Off
                 ; 0000 0106 // Compare C Match Interrupt: Off
                 ; 0000 0107 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
000168 bdef      	OUT  0x2F,R30
                 ; 0000 0108 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000169 bdee      	OUT  0x2E,R30
                 ; 0000 0109 TCNT1H=0x00;
00016a bded      	OUT  0x2D,R30
                 ; 0000 010A TCNT1L=0x00;
00016b bdec      	OUT  0x2C,R30
                 ; 0000 010B ICR1H=0x00;
00016c bde7      	OUT  0x27,R30
                 ; 0000 010C ICR1L=0x00;
00016d bde6      	OUT  0x26,R30
                 ; 0000 010D OCR1AH=0x00;
00016e bdeb      	OUT  0x2B,R30
                 ; 0000 010E OCR1AL=0x00;
00016f bdea      	OUT  0x2A,R30
                 ; 0000 010F OCR1BH=0x00;
000170 bde9      	OUT  0x29,R30
                 ; 0000 0110 OCR1BL=0x00;
000171 bde8      	OUT  0x28,R30
                 ; 0000 0111 OCR1CH=0x00;
000172 93e0 0079 	STS  121,R30
                 ; 0000 0112 OCR1CL=0x00;
000174 93e0 0078 	STS  120,R30
                 ; 0000 0113 
                 ; 0000 0114 // Timer/Counter 2 initialization
                 ; 0000 0115 // Clock source: System Clock
                 ; 0000 0116 // Clock value: Timer2 Stopped
                 ; 0000 0117 // Mode: Normal top=0xFF
                 ; 0000 0118 // OC2 output: Disconnected
                 ; 0000 0119 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000176 bde5      	OUT  0x25,R30
                 ; 0000 011A TCNT2=0x00;
000177 bde4      	OUT  0x24,R30
                 ; 0000 011B OCR2=0x00;
000178 bde3      	OUT  0x23,R30
                 ; 0000 011C 
                 ; 0000 011D // Timer/Counter 3 initialization
                 ; 0000 011E // Clock source: System Clock
                 ; 0000 011F // Clock value: Timer3 Stopped
                 ; 0000 0120 // Mode: Normal top=0xFFFF
                 ; 0000 0121 // OC3A output: Disconnected
                 ; 0000 0122 // OC3B output: Disconnected
                 ; 0000 0123 // OC3C output: Disconnected
                 ; 0000 0124 // Noise Canceler: Off
                 ; 0000 0125 // Input Capture on Falling Edge
                 ; 0000 0126 // Timer3 Overflow Interrupt: Off
                 ; 0000 0127 // Input Capture Interrupt: Off
                 ; 0000 0128 // Compare A Match Interrupt: Off
                 ; 0000 0129 // Compare B Match Interrupt: Off
                 ; 0000 012A // Compare C Match Interrupt: Off
                 ; 0000 012B TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
000179 93e0 008b 	STS  139,R30
                 ; 0000 012C TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
00017b 93e0 008a 	STS  138,R30
                 ; 0000 012D TCNT3H=0x00;
00017d 93e0 0089 	STS  137,R30
                 ; 0000 012E TCNT3L=0x00;
00017f 93e0 0088 	STS  136,R30
                 ; 0000 012F ICR3H=0x00;
000181 93e0 0081 	STS  129,R30
                 ; 0000 0130 ICR3L=0x00;
000183 93e0 0080 	STS  128,R30
                 ; 0000 0131 OCR3AH=0x00;
000185 93e0 0087 	STS  135,R30
                 ; 0000 0132 OCR3AL=0x00;
000187 93e0 0086 	STS  134,R30
                 ; 0000 0133 OCR3BH=0x00;
000189 93e0 0085 	STS  133,R30
                 ; 0000 0134 OCR3BL=0x00;
00018b 93e0 0084 	STS  132,R30
                 ; 0000 0135 OCR3CH=0x00;
00018d 93e0 0083 	STS  131,R30
                 ; 0000 0136 OCR3CL=0x00;
00018f 93e0 0082 	STS  130,R30
                 ; 0000 0137 
                 ; 0000 0138 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0139 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (1<<TOIE0);
000191 e0e3      	LDI  R30,LOW(3)
000192 bfe7      	OUT  0x37,R30
                 ; 0000 013A ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
000193 e0e0      	LDI  R30,LOW(0)
000194 93e0 007d 	STS  125,R30
                 ; 0000 013B 
                 ; 0000 013C // External Interrupt(s) initialization
                 ; 0000 013D // INT0: Off
                 ; 0000 013E // INT1: Off
                 ; 0000 013F // INT2: Off
                 ; 0000 0140 // INT3: Off
                 ; 0000 0141 // INT4: Off
                 ; 0000 0142 // INT5: Off
                 ; 0000 0143 // INT6: Off
                 ; 0000 0144 // INT7: Off
                 ; 0000 0145 EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000196 93e0 006a 	STS  106,R30
                 ; 0000 0146 EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
000198 bfea      	OUT  0x3A,R30
                 ; 0000 0147 EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
000199 bfe9      	OUT  0x39,R30
                 ; 0000 0148 
                 ; 0000 0149 // USART0 initialization
                 ; 0000 014A // USART0 disabled
                 ; 0000 014B UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00019a b9ea      	OUT  0xA,R30
                 ; 0000 014C 
                 ; 0000 014D // USART1 initialization
                 ; 0000 014E // USART1 disabled
                 ; 0000 014F UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
00019b 93e0 009a 	STS  154,R30
                 ; 0000 0150 
                 ; 0000 0151 // Analog Comparator initialization
                 ; 0000 0152 // Analog Comparator: Off
                 ; 0000 0153 // The Analog Comparator's positive input is
                 ; 0000 0154 // connected to the AIN0 pin
                 ; 0000 0155 // The Analog Comparator's negative input is
                 ; 0000 0156 // connected to the AIN1 pin
                 ; 0000 0157 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00019d e8e0      	LDI  R30,LOW(128)
00019e b9e8      	OUT  0x8,R30
                 ; 0000 0158 SFIOR=(0<<ACME);
00019f e0e0      	LDI  R30,LOW(0)
0001a0 bde0      	OUT  0x20,R30
                 ; 0000 0159 
                 ; 0000 015A // ADC initialization
                 ; 0000 015B // ADC disabled
                 ; 0000 015C ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0001a1 b9e6      	OUT  0x6,R30
                 ; 0000 015D 
                 ; 0000 015E // SPI initialization
                 ; 0000 015F // SPI disabled
                 ; 0000 0160 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001a2 b9ed      	OUT  0xD,R30
                 ; 0000 0161 
                 ; 0000 0162 // TWI initialization
                 ; 0000 0163 // TWI disabled
                 ; 0000 0164 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001a3 93e0 0074 	STS  116,R30
                 ; 0000 0165 
                 ; 0000 0166 // Global enable interrupts
                 ; 0000 0167 }
0001a5 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0001a6 efa4      	LDI  R26,LOW(500)
0001a7 e0b1      	LDI  R27,HIGH(500)
0001a8 940c 01aa 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
0001aa 9610      	adiw r26,0
0001ab f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001ac ea80     +LDI R24 , LOW ( 0xFA0 )
0001ad e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0001ae 9701     +SBIW R24 , 1
0001af f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0001b0 95a8      	wdr
0001b1 9711      	sbiw r26,1
0001b2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001b3 9508      	ret
                 
                 __LNEGB1:
0001b4 23ee      	TST  R30
0001b5 e0e1      	LDI  R30,1
0001b6 f009      	BREQ __LNEGB1F
0001b7 27ee      	CLR  R30
                 __LNEGB1F:
0001b8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  10 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :  13 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:   7 r18:   7 r19:   7 r20:   7 r21:   7 r22:   2 r23:   0 
r24:  10 r25:   3 r26:  15 r27:   7 r28:   2 r29:   1 r30: 178 r31:  24 
x  :   3 y  :  38 z  :   7 
Registers used: 21 out of 35 (60.0%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  21 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   2 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   8 cpc   :   6 cpi   :   2 cpse  :   0 dec   :   1 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  12 inc   :   1 jmp   :  37 ld    :   9 ldd   :   8 
ldi   :  78 lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   7 
movw  :   3 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   6 ori   :   0 out   :  56 pop   :   0 push  :   0 rcall :   5 
ret   :   3 reti  :   2 rjmp  :  16 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :   0 sbic  :   3 sbis  :   0 sbiw  :  12 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  10 std   :  14 sts   :  23 sub   :   0 subi  :   4 
swap  :   0 tst   :   1 wdr   :   1 
Instructions used: 37 out of 117 (31.6%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000372    872     10    882  131072   0.7%
[.dseg] 0x000100 0x000500      0      0      0    4096   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 2 warnings
